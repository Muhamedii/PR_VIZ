@page "/simplechart"
@using WebviewAppShared.Data.Models;
@using WebviewAppShared.Data.Services;
<h3>Performanca e algoritmeve - Krahasimi mes tyre</h3>


<div class="container" style="display:flex">
    <div class="left-panel" style="width: 30%">
        <div class="form-group">
            <Label For="referencestring">Shkruaj vargun e faqeve (te ndare me presje):</Label>
            <TextEdit @bind-Text="ReferenceString" id="referencestring" Class="form-control" Style="height: 25%" />
        </div>

        <div class="form-group">
            <Label For="formData.">Zgjdih nje algoritem:</Label>
            <Select TValue="int" @bind-SelectedValue="SelectedAlgorithm" id="selectedalgorithm" Class="form-control" Style="width: 70%;">
                @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
                {
                    <SelectItem Value="@option.GetHashCode()">@option</SelectItem>
                }
            </Select>
        </div>

        <div class="form-group">
            <Label For="framesizeoptions">Zgjidh nje apo me shume madhesi te kornizes memorike: </Label>
            <Select TValue="int" @bind-SelectedValues="SelectedFrameSizeOptions" Class="form-control" Style="width: 70%;" Multiple>
                @for (int i = 1; i <= 10; i++)
                {
                    int value = i;
                    <SelectItem Value="@i">@value</SelectItem>
                }
            </Select>
        </div>

        <div class="form-group" style="display:flex;justify-content:space-between">
            <button class="btn btn-primary" @onclick="GenerateGraph">Gjenero grafikun</button>
            <button class="btn btn-secondary" @onclick="ResetData">Rivendos te dhenat</button>
        </div>
    </div>

    <div class="middle-panel" style="width: 75%">
        <div id="content">
            <LineChart @ref="LineChart" TItem="int" />
        </div>
    </div>
</div>
<div class="container">
    @{
        foreach (var item in PageFaultRates)
        {
            <p> Per kornizen memorike me madhesi @item.Key raporti i deshtimit te faqeve is: @item.Value %</p>
        }
    }
</div>


@code {
    private LineChart<int> LineChart;
    private PageReplacementService PageReplacementService = new();
    private RequestPayload RequestData = new RequestPayload() { Payload = new() };
    private Dictionary<int, decimal> PageFaultRates = new();

    private int SelectedAlgorithm { get; set; }
    private string ReferenceString { get; set; }
    private IReadOnlyList<int> SelectedFrameSizeOptions { get; set; }

    private void SetData()
    {
        foreach (var frameSizeOption in SelectedFrameSizeOptions)
        {
            RequestData.Payload.Add(new PageReplacementParameters
                {
                    AlgorithmType = (AlgorithmType)SelectedAlgorithm,
                    Pages = !string.IsNullOrEmpty(ReferenceString) ? ReferenceString.Split(',').Select(x => Convert.ToInt32(x)).ToList() : new(),
                    FrameSize = frameSizeOption
                });
        }
    }

    private async Task ResetData()
    {
        SelectedAlgorithm = (int)default(AlgorithmType);
        ReferenceString = string.Empty;
        SelectedFrameSizeOptions = null;
        RequestData = new RequestPayload() { Payload = new() };

        await LineChart.Clear();
    }

    private async Task GenerateGraph()
    {
        SetData();
        var response = PageReplacementService.GetGeneratedResult(RequestData);
        var frameSizes = response.FrameSizePageFailRatioData.Select(x => x.Item2);
        var pageFaults = response.FrameSizePageFailRatioData.Select(x => x.Item1);
        await LineChart.Clear();

        await LineChart.AddLabelsDatasetsAndUpdate(Enumerable.ToArray<string>(frameSizes.Select(x => x.ToString())), GetChartDataSet(pageFaults));

        PageFaultRates = GetPageFaultRateData(RequestData.Payload.First().Pages.Count, response.FrameSizePageFailRatioData.ToList());
    }
    private LineChartDataset<int> GetChartDataSet(IEnumerable<int> faults)
    {
        return new LineChartDataset<int>
            {
                Label = "# numri i deshtimeve te faqeve",
                Data = faults.ToList(),
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone"
            };
    }
    private Dictionary<int, decimal> GetPageFaultRateData(int pagesCount, List<Tuple<int, int>> frameSizePageFaults)
    {
        var result = new Dictionary<int, decimal>();
        foreach (var tuple in frameSizePageFaults)
        {
            var faultRate = (decimal)(tuple.Item1 * 100) / pagesCount;
            result.Add(tuple.Item2, Math.Round(faultRate, 2));
        }
        return result;
    }
}