@page "/simplechart"
@using WebviewAppShared.Data.Models;
@using WebviewAppShared.Data.Services;
<h3>SimpleChart</h3>


<div class="container" style="display:flex">
    @* <EditForm Model="formData" OnValidSubmit="GenerateGraph">

    </EditForm>*@
    <div class="left-panel" style="width: 30%">
        <div class="form-group">
            <Label For="referencestring">Enter pages sequence:</Label>
            <TextEdit @bind-Text="ReferenceString" id="referencestring" Class="form-control" Style="height: 25%" />
        </div>

        <div class="form-group">
            <Label For="formData.">Select algorithm:</Label>
            <Select TValue="int" @bind-SelectedValue="SelectedAlgorithm" id="selectedalgorithm" Class="form-control" Style="width: 70%;">
                @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
                {
                    <SelectItem Value="@option.GetHashCode()">@option</SelectItem>
                }
            </Select>
        </div>

        <div class="form-group">
            <Label For="framesizeoptions">Select 1 or more framesize options:</Label>
            <Select TValue="int" @bind-SelectedValues="SelectedFrameSizeOptions" Class="form-control" Style="width: 70%;" Multiple>
                @for (int i = 1; i <= 10; i++)
                {
                    int value = i;
                    <SelectItem Value="@i">@value</SelectItem>
                }
            </Select>
        </div>

        <div class="form-group" style="display:flex;justify-content:space-between">
            <button class="btn btn-primary" @onclick="GenerateGraph">Generate</button>
            <button class="btn btn-secondary" @onclick="ResetData">Reset</button>
        </div>
    </div>

    <div class="middle-panel" style="width: 75%">
        <div id="content">
            <LineChart @ref="lineChart" TItem="int" />
        </div>
    </div>
</div>


@code {
    private LineChart<int> lineChart;
    private PageReplacementService pageReplacementService = new();
    private RequestPayload requestData = new RequestPayload() { Payload = new() };

    private int SelectedAlgorithm { get; set; }
    private string ReferenceString { get; set; }
    private IReadOnlyList<int> SelectedFrameSizeOptions { get; set; }

    private void SetData()
    {
        foreach (var frameSizeOption in SelectedFrameSizeOptions)
        {
            requestData.Payload.Add(new PageReplacementParameters
                {
                    AlgorithmType = (AlgorithmType)SelectedAlgorithm,
                    Pages = !string.IsNullOrEmpty(ReferenceString) ? ReferenceString.Split(',').Select(x => Convert.ToInt32(x)).ToList() : new(),
                    FrameSize = frameSizeOption
                });
        }
    }

    private async Task ResetData()
    {
        SelectedAlgorithm = (int)default(AlgorithmType);
        ReferenceString = string.Empty;
        SelectedFrameSizeOptions = null;
        requestData = new RequestPayload() { Payload = new() };
        await lineChart.Clear();
    }

    private async Task GenerateGraph()
    {
        SetData();
        var response = pageReplacementService.GetGeneratedResult(requestData);
        var frameSizes = response.FrameSizePageFailRatioData.Select(x => x.Item2);
        var pageFaults = response.FrameSizePageFailRatioData.Select(x => x.Item1);
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Enumerable.ToArray<string>(frameSizes.Select(x => x.ToString())), GetChartDataSet(pageFaults));

    }
    private LineChartDataset<int> GetChartDataSet(IEnumerable<int> faults)
    {
        return new LineChartDataset<int>
            {
                Label = "# of page faults",
                Data = faults.ToList(),
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone"
            };
    }
}