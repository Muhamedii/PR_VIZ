@page "/simplechart"
@using WebviewAppShared.Data.Models;
@using WebviewAppShared.Data.Services;
<h3>SimpleChart</h3>


<div class="container" style="display:flex">
    @* <EditForm Model="formData" OnValidSubmit="GenerateGraph">

    </EditForm>*@
    <div class="left-panel" style="width: 25%">
        <div class="form-group">
            <Label For="referencestring">Enter pages sequence:</Label>
            <TextEdit @bind-Text="ReferenceString" id="referencestring" Class="form-control" Style="height: 25%" />
        </div>

        <div class="form-group">
            <Label For="formData.">Select algorithm:</Label>
            <Select TValue="int" @bind-SelectedValue="SelectedAlgorithm" id="selectedalgorithm" Class="form-control" Style="width: 70%;">
                @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
                {
                    <SelectItem Value="@option.GetHashCode()">@option</SelectItem>
                }
            </Select>
        </div>

        <div class="form-group">
            @* <label for="framesizeoptions">Select 1 or more framesize options:</label>
            <select id="framesizeoptions" class="form-control" style="width: 100px"multiple>
            @for (int i = 10; i <= 100; i++)
            {
            <option value="@i">@i</option>
            }
            </select>*@
            <Label For="framesizeoptions">Select 1 or more framesize options:</Label>
            <Select TValue="int" @bind-SelectedValues="SelectedFrameSizeOptions" Class="form-control" Style="width: 70%;" Multiple>
                @for (int i = 1; i <= 10; i++)
                {
                    int value = i;
                    <SelectItem Value="@i">@value</SelectItem>
                }
            </Select>
        </div>

        <button class="btn btn-primary" @onclick="GenerateGraph">Btn1</button>
    </div>

    <div class="middle-panel" style="width: 75%">
        <div id="content">
            <LineChart @ref="lineChart" TItem="int" />
        </div>
    </div>
</div>


@code {
    private LineChart<int> lineChart;
    private PageReplacementService pageReplacementService = new();
    private RequestPayload requestData = new RequestPayload() { Payload = new() };

    private int SelectedAlgorithm { get; set; }
    private string ReferenceString { get; set; }
    private IReadOnlyList<int> SelectedFrameSizeOptions { get; set; }

    private void SetData()
    {
        foreach (var frameSizeOption in SelectedFrameSizeOptions)
        {
            requestData.Payload.Add(new PageReplacementParameters
                {
                    AlgorithmType = (AlgorithmType)SelectedAlgorithm,
                    Pages = !string.IsNullOrEmpty(ReferenceString) ? ReferenceString.Split(',').Select(x => Convert.ToInt32(x)).ToList() : new(),
                    FrameSize = frameSizeOption
                });
        }
    }

    private async Task GenerateGraph()
    {
        SetData();
        var response = pageReplacementService.GetGeneratedResult(requestData);
        //IReadOnlyCollection<object> pageFaults = Array.AsReadOnly<object>(response.FrameSizePageFailRatioData.Select(x => (object)x.Item2).ToArray<object>());
        var frameSizes = response.FrameSizePageFailRatioData.Select(x => x.Item2);
        var pageFaults = response.FrameSizePageFailRatioData.Select(x => x.Item1);
        await lineChart.Clear();

        await lineChart.AddLabelsDatasetsAndUpdate(Enumerable.ToArray<string>(frameSizes.Select(x => x.ToString())), GetChartDataSet(pageFaults));

    }
    private LineChartDataset<int> GetChartDataSet(IEnumerable<int> faults)
    {
        return new LineChartDataset<int>
            {
                Label = "# of page faults",
                Data = faults.ToList(),
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone"
            };
    }
    //LineChart<double> lineChart;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await HandleRedraw();
    //    }
    //}

    //async Task HandleRedraw()
    //{
    //    await lineChart.Clear();

    //    await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
    //}

    //LineChartDataset<double> GetLineChartDataset()
    //{
    //    return new LineChartDataset<double>
    //        {
    //            Label = "# of randoms",
    //            Data = RandomizeData(),
    //            BackgroundColor = backgroundColors,
    //            BorderColor = borderColors,
    //            Fill = true,
    //            PointRadius = 3,
    //            CubicInterpolationMode = "monotone",
    //        };
    //}

    //string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    //List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    //List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    //List<double> RandomizeData()
    //{
    //    var r = new Random(DateTime.Now.Millisecond);

    //    return new List<double> {
    //        r.Next( 3, 50 ) * r.NextDouble(),
    //        r.Next( 3, 50 ) * r.NextDouble(),
    //        r.Next( 3, 50 ) * r.NextDouble(),
    //        r.Next( 3, 50 ) * r.NextDouble(),
    //        r.Next( 3, 50 ) * r.NextDouble(),
    //        r.Next( 3, 50 ) * r.NextDouble() };
    //}
}