@page "/visualizer"
@using WebviewAppShared.Data.Models;
@using WebviewAppShared.Data.Services;

<div class="container">
    <div class="algorithms-container">
        <label for="algorithms">Zgjdih nje algoritem:</label>
        <select id="algorithms" @bind="SelectedAlgorithm">
            @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
            {
                <option value="@option.GetHashCode()">@option</option>
            }
        </select>
    </div>
    <div class="textfield-container">
        <label for="referencestring">Shkruaj vargun e faqeve (te ndare me presje):</label>
        <input type="text" id="referencestring" @bind="ReferenceString">
    </div>
    <div class="framesizeoption-container">
        <label for="framesizeoption">Zgjidh madhesine e kornizes memorike:</label>
        <select id="framesizeoption" @bind="SelectedFrameSizeOption">
            @for (int i = 1; i < 10; i++)
            {
                <option value="@i.GetHashCode()">@i</option>
            }
        </select>
    </div>
    <div class="button-container">
        <button class="btn btn-primary" @onclick="BuildResults">Simulo procesin</button>
        <button class="btn btn-secondary" @onclick="ResetData">Rivendos te dhenat</button>
    </div>
</div>

<div class="table-container">
    @if (ItemsPerFrameState.Count() > 0)
    {
        <table class="table" style="width:300px">
            <thead>
                <tr>
                    @foreach (var column in ReferenceString.Split(','))
                    {
                        <th>@column</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int ctr = 0; ctr < Convert.ToInt32(SelectedFrameSizeOption); ctr++)
                {
                    <tr>
                        @foreach (var value in ItemsPerFrameState.Select(x => x.CurrentItems.ElementAt(ctr)))
                        {
                            <td>@value</td>
                        }
                    </tr>
                }
                <tr>
                    @foreach (var value in ItemsPerFrameState.Select(x => x.IsPageFound))
                    {
                        @if (value == true)
                        {
                            <td style="color:green">GJETJE</td>
                        }
                        else
                        {
                            <td style="color:red">DESHTIM</td>
                        }
                    }
                </tr>
            </tbody>
        </table>
    }
</div>

@code {
    private RequestPayload RequestData = new RequestPayload() { Payload = new() };
    private Dictionary<int, decimal> PageFaultRates = new();
    private List<(List<int> CurrentItems, bool IsPageFound)> ItemsPerFrameState = new();
    private PageReplacementService PageReplacementService = new();

    private int SelectedAlgorithm { get; set; }
    private string ReferenceString { get; set; }
    private string SelectedFrameSizeOption { get; set; }


    private void SetData()
    {
        RequestData.Payload.Add(new PageReplacementParameters
            {
                AlgorithmType = (AlgorithmType)SelectedAlgorithm,
                Pages = !string.IsNullOrEmpty(ReferenceString) ? ReferenceString.Split(',').Select(x => Convert.ToInt32(x)).ToList() : new(),
                FrameSize = Convert.ToInt32(SelectedFrameSizeOption)
            });
    }

    private void BuildResults()
    {
        SetData();
        var response = PageReplacementService.GetGeneratedResult(RequestData);
        foreach (var item in response.FrameState)
        {
            while (item.CurrentItems.Count < Convert.ToInt32(SelectedFrameSizeOption))
            {
                item.CurrentItems.Add(-1);
            }
        }

        ItemsPerFrameState = response.FrameState;
    }
    private void ResetData()
    {
        SelectedAlgorithm = (int)default(AlgorithmType);
        ReferenceString = string.Empty;
        RequestData = new RequestPayload() { Payload = new() };
        PageFaultRates = new();
        ItemsPerFrameState = new();
        PageReplacementService = new();
    }

}
<style>
    .table-container {
        display: flex;
        justify-content: center;
        margin: 50px;
    }

    .table {
        border-collapse: collapse;
        width: auto;
        max-width: 100%;
    }

    th, td {
        border: 4px solid black;
        padding: 8px;
        text-align: center;
    }

    th {
        font-weight: bold;
        font-style: italic;
        background-color: lightskyblue;
    }
</style>

