@page "/visualizer"
@using WebviewAppShared.Data.Models;
@using WebviewAppShared.Data.Services;

<div class="container">
    <div class="algorithms-container">
        <label for="algorithms">Choose algorithm:</label>
        <select id="algorithms" @bind="SelectedAlgorithm">
            @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
            {
                <option value="@option.GetHashCode()">@option</option>
            }
        </select>
    </div>
    <div class="textfield-container">
        <label for="referencestring">Write reference string:</label>
        <input type="text" id="referencestring" @bind="ReferenceString">
    </div>
    <div class="framesizeoption-container">
        <label for="framesizeoption">Choose frame size:</label>
        <select id="framesizeoption" @bind="SelectedFrameSizeOption">
            @for (int i = 1; i < 10; i++)
            {
                <option value="@i.GetHashCode()">@i</option>
            }
        </select>
    </div>
    <div class="button-container">
        <button class="btn btn-primary" @onclick="BuildResults">Reset</button>
    </div>
    @*<div class="form-group">
    <Label For="referencestring">Enter pages sequence:</Label>
    <TextEdit @bind-Text="ReferenceString" id="referencestring" Class="form-control" Style="height: 25%" />
    </div>

    <div class="form-group">
    <Label For="formData.">Select algorithm:</Label>
    <Select TValue="int" @bind-SelectedValue="SelectedAlgorithm" id="selectedalgorithm" Class="form-control" Style="width: 70%;">
    @foreach (var option in Enum.GetValues(typeof(AlgorithmType)))
    {
    <SelectItem Value="@option.GetHashCode()">@option</SelectItem>
    }
    </Select>
    </div>

    <div class="form-group">
    <Label For="framesizeoptions">Select 1 or more framesize options:</Label>
    <Select TValue="int" @bind-SelectedValues="SelectedFrameSizeOptions" Class="form-control" Style="width: 70%;" Multiple>
    @for (int i = 1; i <= 10; i++)
    {
    int value = i;
    <SelectItem Value="@i">@value</SelectItem>
    }
    </Select>
    </div>*@
</div>

<div class="table-container">
    <table class="table" style="width:300px">
        <thead>
            <tr>
            @foreach (var column in ReferenceString.Split(','))
            {
            <th>@column</th>
            }
            </tr>
        </thead>
        <tbody>
            @*@foreach (var row in ItemsPerFrameState)
            {
            <tr>
            @foreach (var value in row.CurrentItems)
            {
            <td>@value</td>
            }
            </tr>
            }*@
            @for (int ctr = 0; ctr < Convert.ToInt32(SelectedFrameSizeOption); ctr++)
            {
                <tr>
                    @foreach (var value in ItemsPerFrameState.Select(x => x.CurrentItems.ElementAt(ctr)))
                    {
                        <td>@value</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private RequestPayload RequestData = new RequestPayload() { Payload = new() };
    private Dictionary<int, decimal> PageFaultRates = new();
    private List<(List<int> CurrentItems, bool IsPageFound)> ItemsPerFrameState = new();
    private PageReplacementService PageReplacementService = new();

    private int SelectedAlgorithm { get; set; }
    private string ReferenceString { get; set; }
    private string SelectedFrameSizeOption { get; set; }

    private void SetData()
    {
        RequestData.Payload.Add(new PageReplacementParameters
            {
                AlgorithmType = (AlgorithmType)SelectedAlgorithm,
                Pages = !string.IsNullOrEmpty(ReferenceString) ? ReferenceString.Split(',').Select(x => Convert.ToInt32(x)).ToList() : new(),
                FrameSize = Convert.ToInt32(SelectedFrameSizeOption)
            });
    }

    //private async Task ResetData()
    //{
    //    SelectedAlgorithm = (int)default(AlgorithmType);
    //    ReferenceString = string.Empty;
    //    SelectedFrameSizeOption = null;
    //    RequestData = new RequestPayload() { Payload = new() };
    //}
    private void BuildResults()
    {
        SetData();
        var response = PageReplacementService.GetGeneratedResult(RequestData);
        foreach (var item in response.FrameState)
        {
            while (item.CurrentItems.Count < Convert.ToInt32(SelectedFrameSizeOption))
            {
                item.CurrentItems.Add(-1);
            }
        }
        ItemsPerFrameState = response.FrameState;
    }


}
<style>
    .table-container {
        display: flex;
        justify-content: center;
        margin: 50px;
    }

    .table {
        border-collapse: collapse;
        width: auto;
        max-width: 100%;
    }

    th, td {
        border: 4px solid black;
        padding: 8px;
        text-align: center;
    }

    th {
        background-color: #f2f2f2;
    }
</style>

